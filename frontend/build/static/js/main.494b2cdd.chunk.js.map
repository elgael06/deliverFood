{"version":3,"sources":["reducers/productos.reducers.js","store.js","components/Layout.js","pages/Home.js","actions/products.js","pages/About.js","pages/Products.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["initialProducts","list","selected","page","productsStore","state","actions","type","value","reducers","combineReducers","createStore","applyMiddleware","thunk","LayoutApp","children","className","to","HomeApp","useSelector","dispatch","useDispatch","history","useHistory","useEffect","console","log","length","obtenerProductos","a","axios","get","res","data","numpages","Layout","style","width","Table","map","e","key","pk","nombre","costo","price","onClick","push","AboutApp","Products","id","useParams","Routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRACaA,EAAkB,CAC3BC,KAAK,GACLC,SAAS,KACTC,KAAK,GAqBMC,EAlBO,WAAmC,IAAlCC,EAAiC,uDAA3BL,EAAgBM,EAAW,uCACpD,OAAQA,EAAQC,MACZ,IAAK,eACD,OAAO,2BACAF,GADP,IAEIJ,KAAKK,EAAQE,QAErB,IAAK,iBACD,OAAO,2BACAH,GADP,IAEIF,KAAKG,EAAQH,KACbD,SAASI,EAAQE,QAEzB,QACI,OAAOH,IChBbI,EAAWC,YAAgB,CAC7BN,kBAGWO,cAAYF,EAAS,CAChCL,cAAcJ,GAChBY,YAAgBC,M,uECUHC,G,MAjBG,SAAC,GAAc,IAAbC,EAAY,EAAZA,SAEhB,OAAO,yBAAKC,UAAU,iBAClB,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,iBACV,kBAAC,IAAD,CAAMC,GAAG,KAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,cAIZ,yBAAKD,UAAU,cACND,M,iCCkCFG,EA1CA,WAAK,IAAD,EACUC,aAAY,SAAAd,GAAK,OAAEA,EAAMD,iBADnC,IACRH,YADQ,MACH,GADG,EAETmB,GAFS,EACAjB,KACEkB,eACXC,EAAUC,cAEhBC,qBAAU,WACNC,QAAQC,IAAI,QACC,GAAbzB,EAAK0B,QAAaC,MACpB,IACF,IAAMA,EAAkB,WACpBR,ECdJ,uCAAO,WAAMA,GAAN,eAAAS,EAAA,sEACeC,IAAMC,IAAI,6CADzB,OACGC,EADH,OAEHP,QAAQC,IAAIM,EAAIC,MACbD,EAAIC,MACHb,EAAS,CAACb,KAAK,eAAeC,MAAMwB,EAAIC,KAAKA,KAAK9B,KAAK6B,EAAIC,KAAKA,KAAKC,WAJtE,2CAAP,wDDiBA,OAAO,kBAACC,EAAD,KACJ,wCACA,6BACA,kBAAC,IAAD,CAAOC,MAAO,CAACC,MAAM,SACjB,kBAACC,EAAA,UAAD,KACI,kBAACA,EAAA,SAAD,KACI,kBAACA,EAAA,UAAD,aACA,kBAACA,EAAA,UAAD,iBACA,kBAACA,EAAA,UAAD,iBACA,kBAACA,EAAA,UAAD,iBACA,kBAACA,EAAA,UAAD,kBAGR,kBAACA,EAAA,UAAD,KACMrC,EAAKsC,KAAI,SAAAC,GACP,OAAO,kBAACF,EAAA,SAAD,CAAUG,IAAKD,EAAEE,IACpB,kBAACJ,EAAA,UAAD,KAAYE,EAAEE,IACd,kBAACJ,EAAA,UAAD,KAAYE,EAAEG,QACd,kBAACL,EAAA,UAAD,KAAYE,EAAEI,OACd,kBAACN,EAAA,UAAD,KAAYE,EAAEK,OACd,kBAACP,EAAA,UAAD,KAAW,kBAAC,IAAD,CAAQQ,QAAS,kBAAIxB,EAAQyB,KAAR,eAAqBP,EAAEE,OAA5C,mBE/BnBM,EAPE,WAEb,OAAO,kBAACb,EAAD,KACH,uCCWOc,EAbE,WAAM,IACZC,EAAMC,cAAND,GAMP,OAJA1B,qBAAU,WACNC,QAAQC,IAAI,eAAewB,MAGxB,kBAACf,EAAD,KACH,yCACCe,EAAG,EAAI,qCAAc,sCCWfE,EAdA,WAEX,OAAO,kBAAC,IAAD,KACH,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,OAAOC,OAAK,EAACC,UAAWN,IACpC,kBAAC,IAAD,CAAOI,KAAK,YAAYC,OAAK,EAACC,UAAWN,IAEzC,kBAAC,IAAD,CAAOI,KAAK,SAASC,OAAK,EAACC,UAAWP,IACtC,kBAAC,IAAD,CAAOK,KAAK,KAAKE,UAAW,kBAAI,8DCR7BC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.494b2cdd.chunk.js","sourcesContent":["\nexport const initialProducts = {\n    list:[],\n    selected:null,\n    page:1\n} \n\nconst productsStore = (state=initialProducts,actions) =>{\n    switch (actions.type) {\n        case 'ADD_PRODUCTS':\n            return {\n                ...state,\n                list:actions.value\n            }\n        case 'SELECT_PRODUCT':\n            return {\n                ...state,\n                page:actions.page,\n                selected:actions.value\n            }    \n        default:\n            return state;\n    }\n}\n\nexport default productsStore;\n","\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport productsStore, { initialProducts } from './reducers/productos.reducers';\n\nconst reducers = combineReducers({\n    productsStore,\n});\n\nexport default createStore(reducers,{\n    productsStore:initialProducts\n},applyMiddleware(thunk));","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './layout.css';\n\nconst LayoutApp = ({children})=>{\n\n    return(<div className='app-container'>\n        <nav className='uk-navbar-container'>\n            <div className='uk-navbar-left'>\n                <ul className='uk-navbar-nav'>\n                    <Link to='/'> Home </Link>\n                    <Link to='/about'> About </Link>\n                </ul>\n            </div>\n        </nav>\n        <div className='uk-section'>\n                {children}\n        </div>\n    </div>);\n}\n\nexport default LayoutApp;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchProductos } from '../actions/products';\nimport LayoutApp from '../components/Layout';\nimport Table,{ TableHead, TableRow, TableCell,TableBody } from 'react-uikit/lib/components/Table';\nimport Button from 'react-uikit/lib/components/Button';\nimport { useHistory } from 'react-router-dom';\n\nconst HomeApp =()=>{\n    const {list=[],page=1} = useSelector(state=>state.productsStore);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(()=>{\n        console.log('home')\n        list.length==0 && obtenerProductos();\n    },[]);\n    const obtenerProductos =()=>{\n        dispatch(fetchProductos());        \n    }\n\n    return(<LayoutApp>\n       <h3>home app</h3>\n       <br/>\n       <Table style={{width:'100%'}}>\n           <TableHead>\n               <TableRow >\n                   <TableCell> id </TableCell>\n                   <TableCell> nombre </TableCell>\n                   <TableCell> consto </TableCell>\n                   <TableCell> precio </TableCell>\n                   <TableCell>Actions</TableCell>\n               </TableRow>\n           </TableHead>\n           <TableBody>\n               { list.map(e=>{\n                   return(<TableRow key={e.pk}>\n                       <TableCell>{e.pk}</TableCell>\n                       <TableCell>{e.nombre}</TableCell>\n                       <TableCell>{e.costo}</TableCell>\n                       <TableCell>{e.price}</TableCell>\n                       <TableCell><Button onClick={()=>history.push(`edit/${e.pk}`)}>Editar</Button></TableCell>\n                   </TableRow>);\n               })}\n           </TableBody>\n       </Table>\n    </LayoutApp>);\n}\n\n\nexport default HomeApp;","import axios from 'axios';\n\nexport const fetchProductos = () =>{\n\n    return async dispatch =>{\n        const res = await axios.get('http://localhost:8000/api/store/products/');\n        console.log(res.data);\n        if(res.data){\n            dispatch({type:'ADD_PRODUCTS',value:res.data.data,page:res.data.data.numpages})\n        }\n    }\n}\n\n","import React from 'react';\nimport LayoutApp from '../components/Layout';\n\nconst AboutApp = ()=>{\n\n    return(<LayoutApp>\n        <h3>about</h3>\n    </LayoutApp>);\n}\n\nexport default AboutApp;\n","import React, { useEffect } from 'react';\nimport LayoutApp from '../components/Layout';\nimport { useParams } from 'react-router-dom';\n\nconst Products = () =>{\n    const {id} = useParams();\n\n    useEffect(()=>{\n        console.log('productos!!!',id);\n    });\n\n    return(<LayoutApp>\n        <h3>Productos</h3>\n        {id>0 ? <p>Editar</p>:<p>nuevo</p>}\n    </LayoutApp>);\n}\n\nexport default Products;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport HomeApp from \"../pages/Home\";\nimport AboutApp from \"../pages/About\";\nimport Products from \"../pages/Products\";\n\nconst Routes = ()=>{\n\n    return(<Router>\n        <Switch>\n            <Route path='/' exact component={HomeApp} />\n            <Route path='/add' exact component={Products} />\n            <Route path='/edit/:id' exact component={Products} />            \n            \n            <Route path='/about' exact component={AboutApp} />\n            <Route path='/*' component={()=><h3>Pagina no encontrada !!!</h3>} />\n        </Switch>\n    </Router>);\n} \n\nexport default Routes;\n\n\n","import React from 'react';\nimport './App.css';\nimport Routes from './routes';\n\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}